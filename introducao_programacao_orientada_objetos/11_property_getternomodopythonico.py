# @property - um getter no modo Pyth√¥nico
# getter - um m√©todo para obter um atributo
# cor -> get_cor()
# modo pyth√¥nico - modo do Python de fazer coisas
# @property √© uma propriedade do objeto, ela
# √© um m√©todo que se comporta como um
# atributo ü§Ø ü§Ø ü§Ø
# Geralmente √© usada nas seguintes situa√ß√µes:
# - como getter
# - p/ evitar quebrar c√≥digo cliente
# - p/ habilitar setter
# - p/ executar a√ß√µes ao obter um atributo
# C√≥digo cliente - √© o c√≥digo que usa seu c√≥digo
class Caneta:
    def __init__(self, cor):
        self.cor_tinta = cor

    @property
    def cor(self):
        print('PROPERTY')
        return self.cor_tinta

    @property
    def cor_tampa(self):
        return 123456

###########################


caneta = Caneta('Azul')
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor_tampa)

#####################################

# class Caneta:
#     def __init__(self, cor):
#         self.cor_tinta = cor

#     def get_cor(self):
#         print('GET COR')
#         return self.cor_tinta

# ###########################


# caneta = Caneta('Azul')
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())

# ----------------------------------------------------------------
# A palavra-chave `property` em Python √© usada para criar m√©todos de acesso para atributos de classe, permitindo que voc√™ controle como esses atributos s√£o obtidos e definidos. Ela ajuda a encapsular a l√≥gica de acesso aos atributos e pode ser √∫til quando voc√™ deseja adicionar valida√ß√µes, c√°lculos ou opera√ß√µes personalizadas ao acessar ou modificar um atributo.

# Vamos dar uma olhada em como usar a `property`:


class Circulo:
    def __init__(self, raio):
        self._raio = raio
    
    @property
    def raio(self):
        return self._raio
    
    @raio.setter
    def raio(self, novo_raio):
        if novo_raio >= 0:
            self._raio = novo_raio
        else:
            raise ValueError("O raio n√£o pode ser negativo.")
    
    @property
    def area(self):
        return 3.14159 * self._raio ** 2

# Criando um objeto Circulo
circulo = Circulo(raio=5)

# Acessando o raio usando a property
print(circulo.raio)  # Sa√≠da: 5

# Acessando a √°rea usando a property
print(circulo.area)  # Sa√≠da: 78.53975

# Tentando definir um raio negativo
try:
    circulo.raio = -2
except ValueError as e:
    print(e)  # Sa√≠da: O raio n√£o pode ser negativo.


# No exemplo acima, a classe `Circulo` possui um atributo privado `_raio` e tr√™s m√©todos `raio`, `raio.setter` e `area` decorados com `@property`. 

# - O m√©todo `raio` √© uma property que permite acessar o valor do raio.
# - O m√©todo `raio.setter` permite definir o valor do raio, mas com uma valida√ß√£o para garantir que o raio n√£o seja negativo.
# - O m√©todo `area` √© outra property que calcula a √°rea do c√≠rculo baseada no raio.

# A `property` oferece uma maneira elegante de definir e controlar o acesso aos atributos, permitindo que voc√™ adicione l√≥gica personalizada durante o processo de obten√ß√£o ou defini√ß√£o.